"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.some=exports.none=exports.any=exports.most=exports.all=exports.evaluate=exports.hasProp=exports.isDate=exports.isRegExp=exports.isFunction=exports.isPromise=exports.isInstanceOf=exports.isClassDeclaration=exports.isEmpty=exports.isArray=exports.isObject=exports.isFloat=exports.isInt=exports.isNumber=exports.isString=exports.isBoolean=exports.isPrimitive=exports.isNull=exports.isDefined=void 0;
/**
```typescript
isDefined(value: any): boolean
```
Returns `false` if the value is `undefined` or `null`. Otherwise returns `true`.
 */function isDefined(value){return value!==undefined&&value!==null}exports.isDefined=isDefined;
/**
```typescript
isNull(value: any): boolean
```
Returns `true` if the value is `null`. Otherwise returns `false`.
 */function isNull(value){return value===null}exports.isNull=isNull;
/**
```typescript
isPrimitive(value: any): boolean
```
Returns `true` if the value is of any of those types: `number` , `string` , `boolean` , `null` , `undefined` , `symbol` or `bigint`.

Otherwise returns `false`.
 */function isPrimitive(value){return typeof value=="number"||typeof value=="string"||typeof value=="boolean"||!isDefined(value)||typeof value=="symbol"||typeof value=="bigint"}exports.isPrimitive=isPrimitive;
/**
```typescript
isBoolean(value: any): boolean
```
Returns `true` if the value is `true` or `false`. Otherwise returns `false`.
 */function isBoolean(value){return typeof value=="boolean"}exports.isBoolean=isBoolean;
/**
```typescript
isString(value: any): boolean
```
Returns `true` if the value is of type `string`, and is not an empty string. Otherwise returns `false`.
 */function isString(value){return typeof value=="string"&&value.length>0}exports.isString=isString;
/**
```typescript
isNumber(value: any): boolean
```
Returns `true` if the value is of type `number`, and is not a `NaN`. Otherwise returns `false`.
 */function isNumber(value){return typeof value=="number"&&!isNaN(value)}exports.isNumber=isNumber;
/**
```typescript
isInt(value: any): boolean
```
Returns `true` if the value is a number, and it **doesn't** have any decimal places. Otherwise returns `false`.
 */function isInt(value){return isNumber(value)&&value%1==0}exports.isInt=isInt;
/**
```typescript
isFloat(value: any): boolean
```
Returns `true` if the value is a number, and it **does** have some decimal places. Otherwise returns `false`.
 */function isFloat(value){return isNumber(value)&&value%1!=0}exports.isFloat=isFloat;
/**
```typescript
isObject(value: any): boolean
```
Returns `true` if the value is of type `object`, and [is defined](#isdefined). Otherwise returns `false`.
 */function isObject(value){return typeof value=="object"&&isDefined(value)}exports.isObject=isObject;
/**
```typescript
isArray(value: any): boolean
```
Returns `true` if the value is an array. Otherwise returns `false`.
 */function isArray(value){return Array.isArray(value)}exports.isArray=isArray;
/**
```typescript
isEmpty(value: object | string): boolean
```
Returns `true` if:
* the value is a string, and its length is greater than 0,
* the value is an array, and it has at least 1 item,
* the value is an object, and it has at least 1 key.

Otherwise returns `false`.
 */function isEmpty(value){if(typeof value=="string"||Array.isArray(value))return value.length==0;if(value.constructor.name!=="Object")return false;return Object.keys(value).length==0}exports.isEmpty=isEmpty;
/**

```typescript
isClassDeclaration(value: any): boolean
```
Returns `true` if the value is a class declaration. Otherwise returns `false`. All native classes will return `false`.

Example:
```typescript
class Example {
    constructor() {}
}

isClassDeclaration(Example); // -> true
isClassDeclaration(RegExp);  // -> false
```
 */function isClassDeclaration(value){return typeof value==="function"&&/^\s*class\s+/.test(value.toString())}exports.isClassDeclaration=isClassDeclaration;
/**
```typescript
isInstanceOf(value: any, cls: Function): boolean
```
Returns `true` if the value is an instance of the class *cls*. Otherwise returns `false`.
 */function isInstanceOf(value,cls){return value instanceof cls}exports.isInstanceOf=isInstanceOf;
/**
```typescript
isPromise(value: any): boolean
```
Returns `true` if the value is a Promise. Otherwise returns `false`.
 */function isPromise(value){return value instanceof Promise}exports.isPromise=isPromise;
/**
```typescript
isFunction(value: any): boolean
```
Returns `true` if the value [is an instance of](#isinctanceof) Function. Otherwise returns `false`.

All standard functions, arrow functions, classes, constructors, etc. count towards being a Function.
 */function isFunction(value){return value instanceof Function}exports.isFunction=isFunction;
/**
```typescript
isRegExp(value: any): boolean
```
Returns `true` if the value is a regular expression. Otherwise returns `false`.
 */function isRegExp(value){return value instanceof RegExp}exports.isRegExp=isRegExp;
/**
```typescript
isDate(value: any): boolean
```
Returns `true` if the value is [is an instance of](#isinctanceof) Date, or can be parsed into a valid Date. Otherwise returns `false`.

All numbers return `true` when passed into `isDate`.
 */function isDate(value){return!isNaN(new Date(value).valueOf())}exports.isDate=isDate;
/**
```typescript
hasProp(value: any, property: PropertyKey): boolean
```
Returns `true` if the value is an object which has a certain property *property*. Otherwise returns `false`.
 */function hasProp(object,property){if(isArray(object))return false;return object.hasOwnProperty(property)}exports.hasProp=hasProp;const BOOLISH_STRING_REGEX=/(y(es)?|1|t(rue)?|on|sure)/i;
/**
```typescript
evaluate(value: any): boolean
```
Returns `true` if:
* the value is equal to `true`,
* the value is a number, and is not 0,
* the value is an array, and it has at least 1 item,
* the value is an object, and it has at least 1 key,
* the value is any of those strings: (case insensitive)
  ```typescript
  'yes', 'y', '1', 't', 'true', 'on', 'sure'
  ```

Otherwise returns `Boolean(value)`.
 */function evaluate(value){if(isBoolean(value))return value;if(isNumber(value))return value!=0;if(isObject(value))return!isEmpty(value);if(isString(value))return BOOLISH_STRING_REGEX.test(value);return Boolean(value)}exports.evaluate=evaluate;
/**
```typescript
all<T>(array: T[], fn: (value: T) => boolean = Boolean): boolean
```
Firstly, it flattens the given *array*.

For each item in *array*, it calls *fn* and passes the item.

It counts the times *fn* returns either `true` or `false`.

At the end, it returns `true` only if *fn* returned `true` for all items. Otherwise returns `false`.
 */function all(array,fn=Boolean){array=flatten(array);for(const el of array){if(!fn(el))return false}return true}exports.all=all;
/**
```typescript
most<T>(array: T[], fn: (value: T) => boolean = Boolean): boolean
```
Firstly, it flattens the given *array*.

For each item in *array*, it calls *fn* and passes the item.

It counts the times *fn* returns either `true` or `false`.

At the end, it returns `true` only if *fn* returned `true` for at least 50% of all items. Otherwise returns `false`.
 */function most(array,fn=Boolean){array=flatten(array);let count=0;for(const el of array){if(fn(el))count++}return count>=array.length/2}exports.most=most;
/**
```typescript
any<T>(array: T[], fn: (value: T) => boolean = Boolean): boolean
```
Firstly, it flattens the given *array*.

For each item in *array*, it calls *fn* and passes the item.

It counts the times *fn* returns either `true` or `false`.

At the end, it returns `true` if *fn* returned `true` for at least 1 item. Otherwise returns `false`.
 */function any(array,fn=Boolean){array=flatten(array);for(const el of array){if(fn(el))return true}return false}exports.any=any;
/**
```typescript
none<T>(array: T[], fn: (value: T) => boolean = Boolean): boolean
```
Firstly, it flattens the given *array*.

For each item in *array*, it calls *fn* and passes the item.

It counts the times *fn* returns either `true` or `false`.

At the end, it returns `true` only if *fn* returned `false` for all items. Otherwise returns `false`.
 */function none(array,fn=Boolean){array=flatten(array);for(const el of array){if(fn(el))return false}return true}exports.none=none;
/**
```typescript
some<T>(array: T[], threshold: number, fn: (value: T) => boolean = Boolean): boolean
```
Firstly, it flattens the given *array*.

For each item in *array*, it calls *fn* and passes the item.

It counts the times *fn* returns either `true` or `false`.

At the end, it compares these amounts to the threshold:
* if the threshold is less than or equal to 0, it always returns `true`,
* if the threshold is between 0 and 1 (non-inclusive), it is treated as a percetage, and it returns `true` only if *fn* returned `true` at least that many percent of all executions,
* if the threshold is greater than or equal to 1, it returns `true` only if *fn* returned `true` at least that many times.

In all other cases, it returns `false`.
 */function some(array,threshold,fn=Boolean){array=flatten(array);if(threshold<1&&isFloat(threshold))threshold*=array.length;let count=0;for(const el of array){if(fn(el))count++}return count>=threshold}exports.some=some;function flatten(arr){return arr.reduce((function(flat,toFlatten){return flat.concat(Array.isArray(toFlatten)?flatten(toFlatten):toFlatten)}),[])}